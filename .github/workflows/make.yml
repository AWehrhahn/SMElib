name: make

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: GitHub Tag
      id: tag_release
      # You may pin to the exact commit or the version.
      # uses: mathieudutour/github-tag-action@1bab3ab0712cafa42b54c512453487b89bb06504
      uses: mathieudutour/github-tag-action@v5
      with:
        # Required for permission to tag the repo.
        github_token: ${{ secrets.GITHUB_TOKEN }} 
        # Which type of bump to use when none explicitly provided (default: `patch`).
        # default_bump: # optional, default is patch
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.tag_release.outputs.new_tag }}
        release_name: Release ${{ steps.tag_release.outputs.new_tag }}
        draft: false
        prerelease: false
  
  build:
    needs: create_release
    strategy:
      matrix:
        include:
          - name: ubuntu-gfortran
            runs_on: ubuntu-latest
            packages: gfortran
            outputs: lib share
          - name: ubuntu-f2c
            runs_on: ubuntu-latest
            packages: f2c
            outputs: lib share
          - name: windows-gfortran
            runs_on: ubuntu-latest
            packages: gfortran mingw-w64 mingw-w64-tools mingw-w64-common gcc-mingw-w64 gcc-mingw-w64-x86-64 g++-mingw-w64 g++-mingw-w64-x86-64
            target: win64
            ldflags: -L$(x86_64-w64-mingw32-gfortran --print-file-name=)
            cxx: x86_64-w64-mingw32-gcc
            f77: x86_64-w64-mingw32-gfortran
            config_flags: --build=x86_64-pc-linux-gnu --host=x86_64-w64-mingw32
            outputs: bin share
    
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.runs_on }}

    steps:
    - uses: actions/checkout@v2

    - name: Install packages
      if: matrix.runs_on == 'ubuntu-latest'
      run: sudo apt-get install -y ${{ matrix.packages }}
    
    - name: Run F2C
      if: matrix.name == 'ubuntu-f2c'
      run: f2c -w -a -C++ -Nn1604 -Nq1200 -dsrc/eos/ src/eos/*.f & f2c -w -a -C++ -dsrc/sme/ src/sme/*.f
    
    - name: Replace Makefile.am
      if: matrix.name == 'ubuntu-f2c'
      run: rm Makefile.am && mv Makefile_f2c.am Makefile.am
   
    - name: Echo site details
      env:
          CXX: ${{ matrix.cxx }}
          F77: ${{ matrix.f77 }}
          LDFLAGS: ${{ matrix.ldflags }}
      run: echo $CXX $F77 $LDFLAGS
   
    - name: Run Bootstrap and Configure
      env:
        CXX: ${{ matrix.cxx }}
        F77: ${{ matrix.f77 }}
        LDFLAGS: ${{ matrix.ldflags }}
      shell: bash
      run: ./bootstrap && ./configure --prefix=$PWD ${{ matrix.config_flags }}
  
    - name: Install
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      env:
        CXX: ${{ matrix.cxx }}
        F77: ${{ matrix.f77 }}
        LDFLAGS: ${{ matrix.ldflags }}
      run: make install
      
    - name: Zip data # This would actually build your project, using zip for an example artifact
      run: zip -r ${{ matrix.name }} ${{ matrix.outputs }}
    
    - name: Archive compiled library
      uses: actions/upload-artifact@v2
      with:
        name: library
        path: ${{ matrix.name }}.zip

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./${{ matrix.name }}.zip
        asset_name: ${{ matrix.name }}.zip
        asset_content_type: application/zip
